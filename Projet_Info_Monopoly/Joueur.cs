//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace Projet_Info_Monopoly
{
    public class Joueur
    {
        public string nom_joueur { get; set; }
        private double argent { get; set; } // argent du joueur (initialisé à 1500)
        public int position { get; set; } // la position du joueur sur le plateau
        public enum statutJoueur { vivant, enPrison, perdu};
        public statutJoueur statut;
        private LinkedList<Cartes> cartesDuJoueur; // 
        public LinkedList<Propriete> proprieteDuJoueur;
        private static Random r = new Random();



        public Joueur(string nom)
        {
            nom_joueur = nom;
            argent = 1500;
            position = 0;
            cartesDuJoueur = new LinkedList<Cartes>(); // on initialise une liste de cartes dans laquelle on va ajouter les cartes qu'il possède
            proprieteDuJoueur = new LinkedList<Propriete>();
            statut = statutJoueur.vivant;
            
        }

        public void acheterPropriete(Propriete p)
        {
            if ((this.argent > p.prixAchat) && p.estPossedee == false)
            {
                ConsoleKeyInfo c;
                Console.WriteLine("Souhaitez vous acheter {0} pour {1} euros ? (o) (n)", p.nom_case, p.prixAchat);
                do
                {
                    c = Console.ReadKey();
                }
                while (c.KeyChar != 'o' && c.KeyChar != 'n');
                if (c.KeyChar == 'o')
                {
                    Console.Clear();
                    Console.WriteLine(this.nom_joueur + " a acheté {0}", p.nom_case);
                    p.proprietaire = this;
                    p.estPossedee = true;
                    this.proprieteDuJoueur.AddLast(p);
                    this.argent -= p.prixAchat;
                    Console.WriteLine("Il vous reste {0} euros.", this.argent);
                    //this.addCard(carte qui correspond à la propriete)
                }

            }
            else if (this.argent < p.prixAchat)
            {
                Console.WriteLine("Vous n'avez pas assez d'argent pour acheter cette propriété");
            }

        }

        public void paye_loyer(Propriete p, Partie partie)
        {
            if (p.estPossedee == true)
            {
                foreach (Joueur j in partie.joueurs)
                {
                    if (p.proprietaire == j)
                    {
                        Console.WriteLine("Vous devez payer " + p.prixLoyer + " à " + j.nom_joueur);
                        j.argent += p.prixLoyer;
                        this.argent -= p.prixLoyer;
                        Console.WriteLine(j.nom_joueur + " a désormais " + j.argent);
                        Console.WriteLine("Vous avez désormais " + this.argent);
                        Console.ReadLine();
                        Console.Clear();
                    }
                }
            }
        }

        public int avancer()
        {
            position += lanceDe();
            if (position >= 40)
            {
                position = position % 40;
                argent += 200; // pouvoir définir une valeur modifiable depuis le XML
            }
            return position;


        }

        public int lanceDe()
        {
            int compteurDouble = 0;
            int de1 = r.Next(1,7 );
            int de2 = r.Next(1,7);
            int total = de1 + de2;

            if (de1 == de2)
            {
                Console.WriteLine(nom_joueur + " a fait  un double  " + de1 + " ! " + "(" + 2 * de1 + ")");
                compteurDouble++;
            }
            else
            {
                Console.WriteLine(nom_joueur + " a fait : " + total + " (" + de1 + "+" + de2 + ")");
            }

            return total;
        }

        public void addCard(Cartes c)
        {
            cartesDuJoueur.AddLast(c);

        }
        public void removeCard(Cartes c)
        {

        }

        public int calculeNombreTerrainCouleur(Terrain t)
        {

            int nbr = 0;
            foreach (Terrain p in proprieteDuJoueur)
            {
                if (p.Couleur == t.Couleur)
                {
                    nbr++;
                }
            }
            return nbr;

        }

        public int calculeNombreGares()
        {
            int nbr = 0;
            {
                foreach (Propriete p in proprieteDuJoueur)
                {
                    if (p is Gare)
                    {
                        nbr++;
                    }
                }
            }
            return nbr;
        }

        public int calculeNombreCompagnies()
        {
            int nbr = 0;
            {
                foreach (Propriete p in proprieteDuJoueur)
                {
                    if (p is Compagnie)
                    {
                        nbr++;
                    }
                }
            }
            return nbr;
        }

      
    }
}


